name: 05B Deploy CHR to Azure (05B_Deploy_CHR.yml)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REPO_PAT: ${{ secrets.REPO_PAT }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate admin password and update deploy-params.json
        id: genpw
        shell: bash
        run: |
          pwsh -NoProfile -NonInteractive -File ./scripts/01_Generate_And_Set_AdminPassword.ps1 -ParamFilePath "$GITHUB_WORKSPACE/deploy-params.json" -Length 24
          ADMIN_PW=$(jq -r .os_profile_admin_password deploy-params.json)
          echo "admin_pw=$ADMIN_PW" >> $GITHUB_OUTPUT

      - name: Create or update repository secret with admin password (requires REPO_PAT)
        if: ${{ env.REPO_PAT != '' }}
        uses: peter-evans/create-or-update-secret@v2
        with:
          token: ${{ env.REPO_PAT }}
          secret-name: OS_ADMIN_PASSWORD
          secret-value: ${{ steps.genpw.outputs.admin_pw }}

      - name: Warn about missing REPO_PAT
        if: ${{ env.REPO_PAT == '' }}
        run: |
          echo "Repository secret REPO_PAT is not set. Skipping automatic creation of OS_ADMIN_PASSWORD."
          echo "The generated admin password is present in deploy-params.json on the runner."

      - name: Load parameters from deploy-params.json
        id: params
        run: |
          jq -r 'to_entries[] | "\(.key)=\(.value)"' deploy-params.json >> $GITHUB_ENV

      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_ADMIN }}

      - name: Extract SP clientId from GitHub secret
        run: echo "SP_APP_ID=$(echo '${{ secrets.AZURE_CREDENTIALS_ADMIN }}' | jq -r .clientId)" >> $GITHUB_ENV

      - name: Grant SP access to register resource providers
        run: |
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          echo "Granting 'Resource Policy Contributor' role to SP $SP_APP_ID on subscription $SUBSCRIPTION_ID..."

          az role assignment create \
            --assignee "$SP_APP_ID" \
            --role "Resource Policy Contributor" \
            --scope "/subscriptions/$SUBSCRIPTION_ID" || echo "Role may already be assigned or not necessary. Continuing..."

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.2

      - name: Terraform Init
        working-directory: terraform/azure
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).tenantId }}
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/azure
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).tenantId }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform/azure
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).tenantId }}
        run: terraform apply -auto-approve

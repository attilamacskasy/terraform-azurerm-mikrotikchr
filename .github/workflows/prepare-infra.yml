name: Prepare Azure Infra for CHR Deployment

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure (admin)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_ADMIN }}

      - name: Set variables
        id: vars
        run: |
          echo "RESOURCE_GROUP=chr-deploy-rg" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT=chrdeploy$(date +%s | tail -c 6)" >> $GITHUB_ENV
          echo "CONTAINER_NAME=vhds" >> $GITHUB_ENV
          echo "SP_NAME=sp-terraform-chr" >> $GITHUB_ENV
          echo "LOCATION=westeurope" >> $GITHUB_ENV

      - name: Create Resource Group
        run: |
          az group create --name $RESOURCE_GROUP --location $LOCATION

      - name: Create Storage Account + Container
        run: |
          az storage account create \
            --name $STORAGE_ACCOUNT \
            --resource-group $RESOURCE_GROUP \
            --location $LOCATION \
            --sku Standard_LRS

          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT

      - name: Unzip CHR Image
        run: unzip prep-chr-image/chr-7.18.2.vhd.zip -d prep-chr-image

      - name: Upload CHR VHD to Blob
        run: |
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --name chr-7.18.2.vhd \
            --file prep-chr-image/chr-7.18.2.vhd \
            --auth-mode login \
            --overwrite

      - name: Create Terraform Service Principal
        id: create_sp
        run: |
          APP=$(az ad sp create-for-rbac \
            --name $SP_NAME \
            --role Contributor \
            --scopes /subscriptions/${{ fromJson(secrets.AZURE_CREDENTIALS_ADMIN).subscriptionId }}/resourceGroups/$RESOURCE_GROUP \
            --sdk-auth)

          echo "$APP" > sp.json
          echo "SP_JSON=$APP" >> $GITHUB_ENV

      - name: Save SP credentials to GitHub Secrets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '${{ env.SP_JSON }}' | gh secret set AZURE_CREDENTIALS --repo $GITHUB_REPOSITORY

      - name: Output Terraform backend config
        run: |
          cat <<EOF > terraform/backend.tf
          terraform {
            backend "azurerm" {
              resource_group_name  = "$RESOURCE_GROUP"
              storage_account_name = "$STORAGE_ACCOUNT"
              container_name       = "$CONTAINER_NAME"
              key                  = "terraform.tfstate"
            }
          }
          EOF
          cat terraform/backend.tf
